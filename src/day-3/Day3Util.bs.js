// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Util = require("../Util.bs.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

function parseClaim(claimLine) {
  var claimParts = claimLine.split(" ");
  var arg = Caml_array.caml_array_get(claimParts, 2);
  var edgeParts = Belt_Array.map((function (param) {
                return (function (param$1) {
                    return arg.slice(param, param$1);
                  });
              })(0)(-1).split(","), Caml_format.caml_int_of_string);
  var dimensionParts = Belt_Array.map(Caml_array.caml_array_get(claimParts, 3).split("x"), Caml_format.caml_int_of_string);
  var arg$1 = Caml_array.caml_array_get(claimParts, 0);
  return /* record */[
          /* id */Caml_format.caml_int_of_string((function (param) {
                    return arg$1.substring(param);
                  })(1)),
          /* fromEdges : tuple */[
            Caml_array.caml_array_get(edgeParts, 0),
            Caml_array.caml_array_get(edgeParts, 1)
          ],
          /* dimensions : tuple */[
            Caml_array.caml_array_get(dimensionParts, 0),
            Caml_array.caml_array_get(dimensionParts, 1)
          ]
        ];
}

function readClaims(param) {
  return Belt_List.map(Belt_List.fromArray(Util.readLinesOfFile("day3.txt")), parseClaim);
}

exports.parseClaim = parseClaim;
exports.readClaims = readClaims;
/* Util Not a pure module */
