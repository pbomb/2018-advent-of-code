// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Util = require("../Util.bs.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");

function listMismatches(boxID, otherBoxID, _mismatches, _index) {
  while(true) {
    var index = _index;
    var mismatches = _mismatches;
    var boxIDLength = boxID.length;
    var match = index === boxIDLength;
    if (match) {
      return mismatches;
    } else {
      var match$1 = boxID.charAt(index) === otherBoxID.charAt(index);
      _index = index + 1 | 0;
      _mismatches = match$1 ? mismatches : /* :: */[
          index,
          mismatches
        ];
      continue ;
    }
  };
}

function offByOnePair(_remainingBoxIDs, boxID) {
  while(true) {
    var remainingBoxIDs = _remainingBoxIDs;
    if (remainingBoxIDs) {
      var rest = remainingBoxIDs[1];
      var nextBoxID = remainingBoxIDs[0];
      var match = boxID === nextBoxID;
      if (match) {
        _remainingBoxIDs = rest;
        continue ;
      } else {
        var mismatches = listMismatches(boxID, nextBoxID, /* [] */0, 0);
        if (mismatches) {
          if (mismatches[1]) {
            _remainingBoxIDs = rest;
            continue ;
          } else {
            return /* record */[
                    /* boxIDs : array */[
                      boxID,
                      nextBoxID
                    ],
                    /* differenceAt */mismatches[0]
                  ];
          }
        } else {
          _remainingBoxIDs = rest;
          continue ;
        }
      }
    } else {
      return undefined;
    }
  };
}

function findOffByOneBoxIDs(_boxIDs) {
  while(true) {
    var boxIDs = _boxIDs;
    if (boxIDs) {
      var rest = boxIDs[1];
      var match = offByOnePair(rest, boxIDs[0]);
      if (match !== undefined) {
        return match;
      } else {
        _boxIDs = rest;
        continue ;
      }
    } else {
      return undefined;
    }
  };
}

function logResult(result) {
  if (result !== undefined) {
    var res = result;
    var boxID = Caml_array.caml_array_get(res[/* boxIDs */0], 0);
    console.log(boxID.substring(0, res[/* differenceAt */1]) + boxID.substring(res[/* differenceAt */1] + 1 | 0));
    return /* () */0;
  } else {
    console.log("Unable to find the answer");
    return /* () */0;
  }
}

var groups = logResult(findOffByOneBoxIDs(Belt_List.fromArray(Util.readLinesOfFile("day2.txt"))));

exports.listMismatches = listMismatches;
exports.offByOnePair = offByOnePair;
exports.findOffByOneBoxIDs = findOffByOneBoxIDs;
exports.logResult = logResult;
exports.groups = groups;
/* groups Not a pure module */
