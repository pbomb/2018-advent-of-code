// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Util = require("../Util.bs.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Belt_HashMapString = require("bs-platform/lib/js/belt_HashMapString.js");

function calculateInstancesOfChar(_boxID, instancesOfChar) {
  while(true) {
    var boxID = _boxID;
    var nextChar = boxID.charAt(0);
    var restChars = boxID.substring(1);
    var match = Belt_HashMapString.get(instancesOfChar, nextChar);
    Belt_HashMapString.set(instancesOfChar, nextChar, match !== undefined ? match + 1 | 0 : 1);
    if (restChars.length > 0) {
      _boxID = restChars;
      continue ;
    } else {
      return 0;
    }
  };
}

function calculateGroups(_boxIDs, _groups) {
  while(true) {
    var groups = _groups;
    var boxIDs = _boxIDs;
    if (boxIDs) {
      var boxID = boxIDs[0];
      var instancesOfChar = Belt_HashMapString.make(boxID.length);
      calculateInstancesOfChar(boxID, instancesOfChar);
      var nextGroup = Belt_HashMapString.reduce(instancesOfChar, /* record */[
            /* twos */0,
            /* threes */0
          ], (function (groups, _key, value) {
              if (value !== 2) {
                if (value !== 3) {
                  return groups;
                } else {
                  return /* record */[
                          /* twos */groups[/* twos */0],
                          /* threes */groups[/* threes */1] + 1 | 0
                        ];
                }
              } else {
                return /* record */[
                        /* twos */groups[/* twos */0] + 1 | 0,
                        /* threes */groups[/* threes */1]
                      ];
              }
            }));
      var match = nextGroup[/* twos */0] > 0;
      var match$1 = nextGroup[/* threes */1] > 0;
      var updatedGroups_000 = /* twos */groups[/* twos */0] + (
        match ? 1 : 0
      ) | 0;
      var updatedGroups_001 = /* threes */groups[/* threes */1] + (
        match$1 ? 1 : 0
      ) | 0;
      var updatedGroups = /* record */[
        updatedGroups_000,
        updatedGroups_001
      ];
      _groups = updatedGroups;
      _boxIDs = boxIDs[1];
      continue ;
    } else {
      return groups;
    }
  };
}

var groups = calculateGroups(Belt_List.fromArray(Util.readLinesOfFile("day2.txt")), /* record */[
      /* twos */0,
      /* threes */0
    ]);

console.log(/* array */[
      groups[/* twos */0],
      groups[/* threes */1],
      Caml_int32.imul(groups[/* twos */0], groups[/* threes */1])
    ]);

exports.calculateInstancesOfChar = calculateInstancesOfChar;
exports.calculateGroups = calculateGroups;
exports.groups = groups;
/* groups Not a pure module */
